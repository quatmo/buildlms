#!/bin/bash
# wget -O - https://raw.githubusercontent.com/quatmo/runesq/main/mompd | sh
# cd /tmp && wget https://raw.githubusercontent.com/quatmo/runesq/main/mompd && chmod -R 755 /tmp/mompd && ./mompd
file_path="/volumio/app/plugins/music_service/mpd/index.js"
file_path2="/volumio/app/plugins/system_controller/networkfs/index.js"
file_path3="/volumio/app/plugins/system_controller/system/index.js"
cp -f $file_path /volumio/app/plugins/music_service/mpd/index1.js
cp -f $file_path2 /volumio/app/plugins/system_controller/networkfs/index1.js
cp -f $file_path3 /volumio/app/plugins/system_controller/system/index_1.js

awk '/return this.sendMpdCommand\('"'"'update'"'"', \[\]\);/ { print "    //return this.sendMpdCommand(\x27update\x27, \x27\x27);"; print "    //return this.sendMpdCommand(\x27update\x27, ['USB']);"; next } 1' "$file_path" > temp_file && mv temp_file "$file_path"

sed -i '/ControllerMpd.prototype.updateDb = function (data) {/,/};/c\
ControllerMpd.prototype.updateDb = function(data) {\
    var self = this;\
    self.checkUSBDrives(); //volki\
    // if (data != undefined) {\
    //     pos = data.replace(\x27music-library/\x27, \x27\x27);\
    //     message = pos + \x27: \x27 + message;\
    // }\
    // self.commandRouter.pushToastMessage(\x27success\x27, self.commandRouter.getI18nString(\x27COMMON.MY_MUSIC\x27), message);\
    // return self.sendMpdCommand(\x27update\x27, [pos]);\
};' "$file_path"


sed -i '/ControllerMpd.prototype.rescanDb = function () {/,/};/c\
ControllerMpd.prototype.rescanDb = function () {\
    var self = this;\
    self.checkUSBDrives(); //volki\
        //self.commandRouter.pushToastMessage(\x27success\x27, //self.commandRouter.getI18nString(\x27COMMON.MY_MUSIC\x27), //self.commandRouter.getI18nString(\x27COMMON.RESCAN_DB\x27));\
    //return self.sendMpdCommand(\x27rescan\x27, []);\
};' "$file_path"


old_line1="execSync('/usr/bin/mpc rescan', { uid: 1000, gid: 1000});"
new_lines1="//execSync('/usr/bin/mpc rescan', { uid: 1000, gid: 1000});"
new_lines1+=$'\n'
sed -i "s|$old_line1|$new_lines1|g" "$file_path"


old_line2="execSync('/usr/bin/mpc update "' + clearFolder + '"', {uid: 1000, gid: 1000});"
new_lines2="//execSync('/usr/bin/mpc update "' + clearFolder + '"', {uid: 1000, gid: 1000});"
sed -i "s|$old_line2|$new_lines2|g" "$file_path2"


sed -i '/ControllerSystem.prototype.deleteUserData = function () {/,/};/c\
ControllerSystem.prototype.deleteUserData = function () {\
    var self = this;\
    exec("/usr/bin/sudo tar -xzvf /data/configuration.tar.gz --overwrite -C / && /usr/bin/sudo tar -xzvf /data/boot.tar.gz --overwrite -C / && /usr/bin/sudo tar -xzvf /data/tag_cache.tar.gz --overwrite -C / && /usr/bin/sudo tar -xzvf /data/wpa_supplicant.tar.gz --overwrite -C /", { uid: 1000, gid: 1000 }, function (error, stdout, stderr) {\
        if (error) self.logger.error("Cannot " + error);\
        else {\
            self.logger.info("Success");\
            self.commandRouter.reboot();\
        }\
    });\
};' "$file_path3"

sed -i '/ControllerSystem.prototype.savePrivacySettings = function (data) {/,/};/c\
ControllerSystem.prototype.savePrivacySettings = function (data) {\
    var self = this;\
    var defer = libQ.defer();\
    exec("/usr/bin/sudo tar -czvf /data/configuration.tar.gz /data/configuration && /usr/bin/sudo tar -czvf /data/boot.tar.gz /boot/config.txt && /usr/bin/sudo tar -czvf /data/tag_cache.tar.gz /var/lib/mpd/tag_cache && /usr/bin/sudo tar -czvf /data/wpa_supplicant.tar.gz /etc/wpa_supplicant/wpa_supplicant.conf", {uid: 1000, gid: 1000}, function (error, stdout, stderr) {\
        if (error !== null) {\
            self.logger.error("Cannot" + error);\
        } else {\
            self.logger.info("success");\
        }\
    });\
    return self.commandRouter.reloadUi();\
};' "$file_path3"

sed -i '/ControllerMpd.prototype.mpdEstablish = function () {/,/};/c\
ControllerMpd.prototype.mpdEstablish = function () {\
    var self = this;\
    \
    // TODO use names from the package.json instead\
    self.servicename = \x27mpd\x27;\
    self.displayname = \x27MPD\x27;\
    \
    // getting configuration\
    \
    // Save a reference to the parent commandRouter\
    self.commandRouter = self.context.coreCommand;\
    // Connect to MPD\
    self.mpdConnect();\
    \
    // Make a promise for when the MPD connection is ready to receive events\
    self.mpdReady = libQ.nfcall(self.clientMpd.on.bind(self.clientMpd), \x27ready\x27);\
    \
    self.mpdReady.then(function () {\
        if (startup) {\
            startup = false;\
            setTimeout(()=>{\
                //self.checkIfMpdRequiresRescan();\
            }, 2500)\
            setTimeout(()=>{\
                //self.checkUSBDrives(); //volki\
                //self.listAlbums(); //volki\
                //self.getMyCollectionStats(); //volki\
            }, 5000);\
        }\
    });\
};' "$file_path"


#sed -i "s|exec('/usr/bin/mpc update', {uid: 1000, gid: 1000}|exec('', {uid: 1000, gid: 1000})|g" "/volumio/app/plugins/music_service/mpd/index.js"

echo "Done"


